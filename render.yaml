import os

# Re-create deployment files after kernel reset
os.makedirs("/mnt/data/digit-recognizer", exist_ok=True)

# Streamlit app.py
app_code = '''\
import streamlit as st
import numpy as np
import cv2
from tensorflow.keras.models import load_model
from streamlit_drawable_canvas import st_canvas

st.set_page_config(page_title="Digit Recognizer", layout="centered")
st.title("✍️ Handwritten Digit Recognizer")
st.write("Draw a digit below and let the model predict it.")

model = load_model("mnist.h5")

canvas_result = st_canvas(
    fill_color="white",
    stroke_width=20,
    stroke_color="black",
    background_color="white",
    height=280,
    width=280,
    drawing_mode="freedraw",
    key="canvas",
)

if st.button("Predict"):
    if canvas_result.image_data is not None:
        img = canvas_result.image_data.astype("uint8")
        img = cv2.cvtColor(img, cv2.COLOR_RGBA2GRAY)
        img = cv2.resize(img, (28, 28))
        img = 255 - img
        img = img / 255.0
        img = img.reshape(1, 28, 28, 1)
        prediction = model.predict(img)
        digit = np.argmax(prediction)
        st.success(f"✅ Predicted Digit: {digit}")
    else:
        st.warning("Please draw a digit first.")
'''

# requirements.txt
requirements_text = '''\
streamlit
tensorflow==2.12.0
opencv-python
pillow
streamlit-drawable-canvas
'''

# render.yaml
render_yaml = '''\
services:
  - type: web
    name: digit-recognizer
    env: python
    plan: free
    buildCommand: pip install -r requirements.txt
    startCommand: streamlit run app.py --server.port=10000 --server.address=0.0.0.0
    branch: main
'''

# Save all files
with open("/mnt/data/digit-recognizer/app.py", "w") as f:
    f.write(app_code)
with open("/mnt/data/digit-recognizer/requirements.txt", "w") as f:
    f.write(requirements_text)
with open("/mnt/data/digit-recognizer/render.yaml", "w") as f:
    f.write(render_yaml)
